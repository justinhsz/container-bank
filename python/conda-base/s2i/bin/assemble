#!/bin/bash
#
# Globals:
#   TARGET_CONDA_ENV        The environment name that you want to create. Default: 'default'.
#   CONDA_DEPENDENCY_FILE   The dependency definition which exports from a conda environment.
#                           Support these file extensions: '.txt' and '.yml'.
#                           No default value, but the script will check 'environment.yml' and 'requirements.txt'.
#   DISABLE_COLLECTSTATIC   Django required variable.

set -e

echo "---> Installing application source"
cp -Rf /tmp/src/. ./

# Fix source directory permissions
fix-permissions ./

# Identify conda command
if ! hash conda 2>/dev/null; then
  echo "---> Initialing Conda command"
  $CONDA_HOME/bin/conda init
  source ~/.bashrc
fi

# Restore build artifacts: The previous conda environment.
if [ "$(ls /tmp/artifacts/ 2>/dev/null)" ]; then
  echo "---> Restoring environments that we created before."
  mv /tmp/artifacts/envs/* $CONDA_HOME/envs/
  # ls -1 $CONDA_HOME/envs/ >> ~/.conda/environments.txt
fi

# Python Environment setup

function is_django_installed() {
  python -c "import django" &>/dev/null
}

function should_collectstatic() {
  is_django_installed && [[ -z "$DISABLE_COLLECTSTATIC" ]]
}

function create_or_update_conda_env() {
  local INPUT_DEPENDENCY_FILE=$1

  if [[ -f $INPUT_DEPENDENCY_FILE ]]; then
    >&2 echo "ERROR: The file, '$INPUT_DEPENDENCY_FILE', is not exist."
    exit 1
  fi

  local FILE_EXTENSION="${INPUT_DEPENDENCY_FILE: -4}"
  local CONDA_ENV_SYMBOL=""
  local CONDA_INSTALL_ACTION="create"

  if [[ "$FILE_EXTENSION" == ".txt" ]]; then
    CONDA_ENV_SYMBOL=""
  elif [[ "$FILE_EXTENSION" == ".yml"]]; then
    CONDA_ENV_SYMBOL="env"
  else
    >&2 echo "ERROR: The file extension, '$FILE_EXTENSION', is not supported. Please use '.txt' and '.yml' instead."
    exit 1
  fi

  if [[ -d "$CONDA_HOME/envs/$TARGET_CONDA_ENV" ]]; then
    echo "Found existed conda environment: '$TARGET_CONDA_ENV', start to update the environment.''"
    CONDA_INSTALL_ACTION="update"
  fi

  # Run conda env create/update command with specified dependency file.
  echo "Start ${CONDA_INSTALL_ACTION::5}ing the environemnt '$TARGET_CONDA_ENV' with the specified dependency file '$INPUT_DEPENDENCY_FILE'."
  conda $CONDA_ENV_SYMBOL $CONDA_INSTALL_ACTION -n $TARGET_CONDA_ENV --file $INPUT_DEPENDENCY_FILE

  # Clean up the installation.
  conda -ay
}

shopt -s dotglob

# set permissions for any installed artifacts
fix-permissions /opt/app-root -P

# Install packages
# To prevent git issue, add following variables:
# export GIT_COMMITTER_NAME='default'
# export GIT_COMMITTER_EMAIL='default@localhost.com'

if [[ -z "$TARGET_CONDA_ENV" ]]; then
  echo "WARNING: could not found TARGET_CONDA_ENV, set it to 'default'"
  export TARGET_CONDA_ENV=default
fi

echo "---> Preparing the python enivronment's dependencies ..."
if [[ -z $CONDA_DEPENDENCY_FILE ]]; then
  if [[ -f requirements.txt ]]; then
    export CONDA_DEPENDENCY_FILE=requirements.txt
  elif [[ -f environment.yml ]]; then
    export CONDA_DEPENDENCY_FILE=environment.yml
  fi
fi

create_or_update_conda_env $CONDA_DEPENDENCY_FILE

if should_collectstatic; then
  (
    echo "---> Activate $TARGET_CONDA_ENV environment"
    conda activate $TARGET_CONDA_ENV

    echo "---> Collecting Django static files ..."
    APP_HOME=$(readlink -f "${APP_HOME:-.}")
    echo "APP_HOME: $APP_HOME"

    # Look for 'manage.py' in the current directory
    manage_file=./manage.py

    if [[ ! -f "$manage_file" ]]; then
      echo "WARNING: seems that you're using Django, but we could not find a 'manage.py' file."
      echo "'manage.py collectstatic' ignored."
      exit
    fi

    if ! python $manage_file collectstatic --dry-run --noinput &> /dev/null; then
      echo "WARNING: could not run 'manage.py collectstatic'. To debug, run:"
      echo "    $ python $manage_file collectstatic --noinput"
      echo "Ignore this warning if you're not serving static files with Django."
      exit
    fi

    python $manage_file collectstatic --noinput
  )
fi

# set permissions for any installed artifacts
fix-permissions /opt/app-root -P